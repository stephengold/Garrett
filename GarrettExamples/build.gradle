// Gradle script to build the GarrettExamples subproject of Garrett

// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'application' // to build JVM applications
}

application {
    mainClass = 'com.github.stephengold.garrett.examples.GarrettDemo'
}

dependencies {
    implementation heartCoordinates
    implementation minieCoordinates
    implementation 'com.github.stephengold:Acorus:2.0.0'
    runtimeOnly 'org.jmonkeyengine:jme3-awt-dialogs:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jme3Version

    // GarrettExamples doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jme3Version
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jme3Version

    //implementation 'com.github.stephengold:Garrett:' + garrettVersion // for published library
    implementation project(':GarrettLibrary') // for latest sourcecode
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSandbox', Delete) { // Acorus sandbox
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}

// Register tasks to run specific applications:

tasks.register('GarrettDemo', JavaExec) {
    description 'Runs the demo.'
    mainClass = 'com.github.stephengold.garrett.examples.GarrettDemo'
}

tasks.register('HelloDynaCam', JavaExec) {
    mainClass = 'com.github.stephengold.garrett.examples.HelloDynaCam'
}
tasks.register('HelloGarrett', JavaExec) {
    mainClass = 'com.github.stephengold.garrett.examples.HelloGarrett'
}
tasks.register('HelloOrbitCam', JavaExec) {
    mainClass = 'com.github.stephengold.garrett.examples.HelloOrbitCam'
}

tasks.withType(JavaExec).configureEach { // Java runtime options:
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-Xms512m', '-Xmx512m' // to enlarge the Java heap
}
